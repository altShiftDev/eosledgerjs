{"version":3,"sources":["../src/utils.js"],"names":["splitPath","foreach","crc16xmodem","encodeEd25519PublicKey","verifyEd25519Signature","hash","checkEosBip32Path","path","result","components","split","forEach","number","parseInt","element","isNaN","length","push","arr","callback","iterate","index","array","then","res","resolve","buf","previous","crc","byte","code","rawPublicKey","versionByte","data","Buffer","from","versionBuffer","payload","concat","checksum","alloc","writeUInt16LE","unencoded","encode","signature","publicKey","sign","detached","verify","Uint8Array","toJSON","hasher","update","digest","toString","endsWith","Error"],"mappings":"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","file":"utils.js","sourcesContent":["/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2017-2018 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//@flow\n\nimport base32 from \"base32.js\";\nimport nacl from \"tweetnacl\";\nimport { sha256 } from \"sha.js\";\n\n// TODO use bip32-path library\nexport function splitPath(path: string): number[] {\n  let result = [];\n  let components = path.split(\"/\");\n  components.forEach(element => {\n    let number = parseInt(element, 10);\n    if (isNaN(number)) {\n      return; // FIXME shouldn't it throws instead?\n    }\n    if (element.length > 1 && element[element.length - 1] === \"'\") {\n      number += 0x80000000;\n    }\n    result.push(number);\n  });\n  return result;\n}\n\nexport function foreach<T, A>(\n  arr: T[],\n  callback: (T, number) => Promise<A>\n): Promise<A[]> {\n  function iterate(index, array, result) {\n    if (index >= array.length) {\n      return result;\n    } else {\n      return callback(array[index], index).then(function(res) {\n        result.push(res);\n        return iterate(index + 1, array, result);\n      });\n    }\n  }\n  return Promise.resolve().then(() => iterate(0, arr, []));\n}\n\nexport function crc16xmodem(buf: Buffer, previous?: number): number {\n  let crc = typeof previous !== \"undefined\" ? ~~previous : 0x0;\n\n  for (var index = 0; index < buf.length; index++) {\n    const byte = buf[index];\n    let code = (crc >>> 8) & 0xff;\n\n    code ^= byte & 0xff;\n    code ^= code >>> 4;\n    crc = (crc << 8) & 0xffff;\n    crc ^= code;\n    code = (code << 5) & 0xffff;\n    crc ^= code;\n    code = (code << 7) & 0xffff;\n    crc ^= code;\n  }\n\n  return crc;\n}\n\nexport function encodeEd25519PublicKey(rawPublicKey: Buffer): string {\n  let versionByte = 6 << 3; // 'G'\n  let data = Buffer.from(rawPublicKey);\n  let versionBuffer = Buffer.from([versionByte]);\n  let payload = Buffer.concat([versionBuffer, data]);\n  let checksum = Buffer.alloc(2);\n  checksum.writeUInt16LE(crc16xmodem(payload), 0);\n  let unencoded = Buffer.concat([payload, checksum]);\n  return base32.encode(unencoded);\n}\n\nexport function verifyEd25519Signature(\n  data: Buffer,\n  signature: Buffer,\n  publicKey: Buffer\n): boolean {\n  return nacl.sign.detached.verify(\n    new Uint8Array(data.toJSON().data),\n    new Uint8Array(signature.toJSON().data),\n    new Uint8Array(publicKey.toJSON().data)\n  );\n}\n\nexport function hash(data: Buffer) {\n  let hasher = new sha256();\n  hasher.update(data, \"utf8\");\n  return hasher.digest();\n}\n\nexport function checkEosBip32Path(path: string): void {\n  path.split(\"/\").forEach(function(element) {\n    if (!element.toString().endsWith(\"'\")) {\n      throw new Error(\n        \"Detected a non-hardened path element in requested BIP32 path.\" +\n          \" Non-hardended paths are not supported at this time. Please use an all-hardened path.\" +\n          \" Example: 44'/148'/0'\"\n      );\n    }\n  });\n}\n"]}
